<?php

namespace Tests\Services;

use App\Models\Admin\Alias;
use App\Models\Admin\Page;
use App\Services\AliasService;
use Tests\TestCase;

class AliasServiceTest extends TestCase
{
    /**
     * @var AliasService|\Illuminate\Contracts\Foundation\Application|mixed
     */
    protected mixed $alias;

    protected function setUp(): void
    {
        parent::setUp(); // TODO: Change the autogenerated stub

        $this->alias = app(AliasService::class);
    }

    /**
     * @throws \Exception
     *
     * задача обновить slug в таблице alias если есть дубль
     */
    public function testUpdateOrCreate()
    {
        $alias = Alias::create(array(
            'slug'       => 'test',
            'controller' => 'Fake',
            'model'      => 'Fake',
            'model_id'   => 1
        ));

        $page = Page::create(array(
            'name'     => 'test2',
            'title'    => 'test',
            'slug'     => 'test',
            'template' => 'home',
        ));

        $pageFind = Page::find($page->id);

        $this->assertEquals('test-1', $pageFind->slug);

        $page->delete();
        $alias->delete();
    }

    /**
     * @throws \Exception
     *
     * Если в aliases такой slug есть тогда добавляем цифру
     */
    public function testSetSlugPostfix()
    {
        $data = [
            'slug'       => 'test',
            'model'      => 'fake',
            'model_id'   => 1,
            'controller' => 'fake'
        ];

        $this->callMethod($this->alias, 'setSlugPostfix', array(
            'data' => &$data
        ));

        $this->assertEquals('test-1', $data['slug']);


        $data = [
            'slug'       => 'test-1',
            'model'      => 'fake',
            'model_id'   => 1,
            'controller' => 'fake'
        ];

        $this->callMethod($this->alias, 'setSlugPostfix', array(
            'data' => &$data
        ));

        dump($data);

        $this->assertEquals('test-2', $data['slug']);
    }

}
